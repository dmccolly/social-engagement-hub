  // Email Campaigns Section Component
  const EmailCampaignsSection = () => {
    const [emailCampaigns, setEmailCampaigns] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [emailContacts, setEmailContacts] = useState([]);
    const [emailGroups, setEmailGroups] = useState([]);

    // Load campaigns from XANO
    useEffect(() => {
      const loadCampaigns = async () => {
        try {
          setIsLoading(true);
          const { getCampaigns } = await import('./services/email/emailCampaignService');
          const result = await getCampaigns();
          
          if (result.success && result.campaigns) {
            setEmailCampaigns(result.campaigns);
          } else {
            // Fallback to sample data if API fails
            setEmailCampaigns([
              {
                id: 1,
                name: 'Welcome Series',
                subject: 'Welcome to our community!',
                status: 'Active',
                recipients: 156,
                sent: 142,
                opened: 89,
                clicked: 23,
                created: '2025-09-20',
                lastSent: '2025-09-25',
                type: 'Automated'
              },
              {
                id: 2,
                name: 'Monthly Newsletter',
                subject: 'Your monthly update is here',
                status: 'Sent',
                recipients: 203,
                sent: 203,
                opened: 156,
                clicked: 45,
                created: '2025-09-15',
                lastSent: '2025-09-24',
                type: 'Newsletter'
              },
              {
                id: 3,
                name: 'Product Launch',
                subject: 'Exciting new features just launched!',
                status: 'Draft',
                recipients: 0,
                sent: 0,
                opened: 0,
                clicked: 0,
                created: '2025-09-25',
                lastSent: null,
                type: 'Promotional'
              }
            ]);
          }
        } catch (error) {
          console.error('Failed to load campaigns:', error);
          // Fallback to sample data
          setEmailCampaigns([
            {
              id: 1,
              name: 'Welcome Series',
              subject: 'Welcome to our community!',
              status: 'Active',
              recipients: 156,
              sent: 142,
              opened: 89,
              clicked: 23,
              created: '2025-09-20',
              lastSent: '2025-09-25',
              type: 'Automated'
            },
            {
              id: 2,
              name: 'Monthly Newsletter',
              subject: 'Your monthly update is here',
              status: 'Sent',
              recipients: 203,
              sent: 203,
              opened: 156,
              clicked: 45,
              created: '2025-09-15',
              lastSent: '2025-09-24',
              type: 'Newsletter'
            },
            {
              id: 3,
              name: 'Product Launch',
              subject: 'Exciting new features just launched!',
              status: 'Draft',
              recipients: 0,
              sent: 0,
              opened: 0,
              clicked: 0,
              created: '2025-09-25',
              lastSent: null,
              type: 'Promotional'
            }
          ]);
        } finally {
          setIsLoading(false);
        }
      };
      
      loadCampaigns();
    }, []);

    // Load contacts and groups for campaign operations
    useEffect(() => {
      const loadContactsAndGroups = async () => {
        try {
          const { getContacts } = await import('./services/email/emailContactService');
          const { getGroups } = await import('./services/email/emailGroupService');
          
          const [contactsResult, groupsResult] = await Promise.all([
            getContacts(),
            getGroups()
          ]);
          
          if (contactsResult.success) setEmailContacts(contactsResult.contacts);
          if (groupsResult.success) setEmailGroups(groupsResult.groups);
        } catch (error) {
          console.error('Failed to load contacts/groups:', error);
        }
      };
      
      loadContactsAndGroups();
    }, []);

    const [isCreatingCampaign, setIsCreatingCampaign] = useState(false);
    const [newCampaign, setNewCampaign] = useState({
      name: '',
      subject: '',
      content: '',
      type: 'Newsletter'
    });

    const statusColors = {
      'Active': 'bg-green-100 text-green-800',
      'Sent': 'bg-blue-100 text-blue-800',
      'Draft': 'bg-yellow-100 text-yellow-800',
      'Paused': 'bg-red-100 text-red-800'
    };

    const typeColors = {
      'Newsletter': 'bg-purple-100 text-purple-800',
      'Promotional': 'bg-orange-100 text-orange-800',
      'Automated': 'bg-indigo-100 text-indigo-800'
    };

    const handleCreateCampaign = () => {
      if (!newCampaign.name || !newCampaign.subject) return;
      
      const campaign = {
        id: Date.now(),
        ...newCampaign,
        status: 'Draft',
        recipients: 0,
        sent: 0,
        opened: 0,
        clicked: 0,
        created: new Date().toISOString().split('T')[0],
        lastSent: null
      };
      
      setEmailCampaigns(prev => [campaign, ...prev]);
      setNewCampaign({ name: '', subject: '', content: '', type: 'Newsletter' });
      setIsCreatingCampaign(false);
    };

    return (
      <div className="space-y-6">
        {/* Header */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
                <Mail className="text-green-600" />
                Email Campaigns
              </h1>
              <p className="text-gray-600 mt-2">Manage and track your email marketing campaigns</p>
            </div>
            <button
              onClick={() => setIsCreatingCampaign(true)}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2"
            >
              <Plus size={20} /> New Campaign
            </button>
          </div>
        </div>

        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Campaigns</p>
                <p className="text-2xl font-bold text-gray-900">{emailCampaigns.length}</p>
              </div>
              <Mail className="text-blue-500" size={32} />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Sent</p>
                <p className="text-2xl font-bold text-gray-900">
                  {emailCampaigns.reduce((sum, c) => sum + c.sent, 0)}
                </p>
              </div>
              <Send className="text-green-500" size={32} />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Opens</p>
                <p className="text-2xl font-bold text-gray-900">
                  {emailCampaigns.reduce((sum, c) => sum + c.opened, 0)}
                </p>
              </div>
              <Eye className="text-purple-500" size={32} />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Clicks</p>
                <p className="text-2xl font-bold text-gray-900">
                  {emailCampaigns.reduce((sum, c) => sum + c.clicked, 0)}
                </p>
              </div>
              <ExternalLink className="text-orange-500" size={32} />
            </div>
          </div>
        </div>

        {/* Create Campaign Modal */}
        {isCreatingCampaign && (
          <CreateCampaignModal
            onCreate={handleCreateCampaign}
